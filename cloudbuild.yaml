
steps:
  # 0. Step to run SonarScanner CLI for SonarCloud analysis
# - name: 'docker.io/sonarsource/sonar-scanner-cli'
#   entrypoint: '/bin/sh'
#   args:
#     [
#       '-c',
#       'sonar-scanner -Dsonar.projectKey=sudhakarzox_nextjs_expense_tracker \
#                     -Dsonar.sources=. \
#                     -Dsonar.host.url=https://sonarcloud.io \
#                     -Dsonar.login=$$SONARCLOUD_TOKEN'
#     ]

# Wait for and check Quality Gate status — fail build if gate fails
  - name: 'gcr.io/cloud-builders/curl'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update && apt-get install -y jq
        echo "Checking SonarCloud Quality Gate status..."
        analysisId=$(curl -s -u $$SONARCLOUD_TOKEN: "https://sonarcloud.io/api/ce/component?component=sudhakarzox_nextjs_expense_tracker" | jq -r ".current.analysisId")
        status="PENDING"
        while [ "$status" = "PENDING" ] || [ "$status" = "IN_PROGRESS" ]; do
          sleep 5
          status=$(curl -s -u $$SONARCLOUD_TOKEN: "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$analysisId" | jq -r ".projectStatus.status")
          echo "Quality Gate status: $status"
        done
        if [ "$status" != "OK" ]; then
          echo "❌ Quality Gate failed. Blocking pipeline."
          exit 1
        else
          echo "✅ Quality Gate passed."
        fi
    secretEnv: ['SONARCLOUD_TOKEN']

  # 1. Build the Docker image with the MongoDB URI as a build argument
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    args: [
      '-c',
      'docker build --build-arg MONGODB_URI=dummy -t gcr.io/$PROJECT_ID/next-exp:$COMMIT_SHA .'
    ]
    # secretEnv: ['MONGODB_URI']

  # 2. Push the Docker image to Artifact/Container Registry
  - name: gcr.io/cloud-builders/docker
    args:
      - push
      - gcr.io/$PROJECT_ID/next-exp:$COMMIT_SHA
  
# 3. Deploy Docker image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: 'gcloud'
    args:
      - run
      - deploy
      - next-exp                 
      - --image
      - gcr.io/$PROJECT_ID/next-exp:$COMMIT_SHA
      - --region
      - us-central1           
      - --platform
      - managed
      - --allow-unauthenticated  # Remove for private endpoints
      - --set-env-vars=NEXTAUTH_URL=https://next-exp-$_PROJECT_NUMBER.us-central1.run.app,NODE_ENV=production,DB=expense-tracker
      - --update-secrets=NEXTAUTH_SECRET=projects/$PROJECT_ID/secrets/NEXTAUTH_SECRET:latest,GOOGLE_CLIENT_SECRET=projects/$PROJECT_ID/secrets/GOOGLE_CLIENT_SECRET:latest,GOOGLE_CLIENT_ID=projects/$PROJECT_ID/secrets/GOOGLE_CLIENT_ID:latest
    env:
      - 'CLOUDSDK_CORE_PROJECT=$PROJECT_ID'
#     secretEnv:
#       - NEXTAUTH_SECRET
#       - GOOGLE_CLIENT_SECRET
#       - GOOGLE_CLIENT_ID

availableSecrets:
  secretManager:
  # - versionName: projects/$PROJECT_ID/secrets/MONGODB_URI/versions/latest
  #   env: MONGODB_URI
  - versionName: projects/$PROJECT_ID/secrets/SONARCLOUD_TOKEN/versions/1
    env: SONARCLOUD_TOKEN
  # - versionName: projects/$PROJECT_ID/secrets/NEXTAUTH_SECRET/versions/latest
  #   env: NEXTAUTH_SECRET
  # - versionName: projects/$PROJECT_ID/secrets/GOOGLE_CLIENT_SECRET/versions/latest
  #   env: GOOGLE_CLIENT_SECRET
  # - versionName: projects/$PROJECT_ID/secrets/GOOGLE_CLIENT_ID/versions/latest
  #   env: GOOGLE_CLIENT_ID


options:
  logging: CLOUD_LOGGING_ONLY
